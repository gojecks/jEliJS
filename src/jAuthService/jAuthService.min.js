!function(){"use strict";function a(){var a={oauth:!1,jdb:!1,openid:!1,custom:!1},b=!1,c={},d={},e=3;this.setLoginType=function(c){c&&a[c]&&!b&&(a[c]=!0),b=c},this.loginServiceConfiguration=function(a){if(!jEli.$isObject(a))throw new error("Configuration is expected to be OBJECT not ("+typeof a+")");c=a},this.registerServiceConfiguration=function(a){if(!jEli.$isObject(a))throw new error("Configuration is expected to be OBJECT not ("+typeof a+")");d=a},this.setMaxLoginAttempt=function(a){e=a},this.$get=function(){var a={};return a.getLoginConfiguration=function(){return c},a.getRegisterConfiguration=function(){return d},a.getLoginType=function(){return b},a.getLoginAttempt=function(){return e},a}}function b(a,b,c){function d(a,b){var c=[];return jEli.forEach(b,function(b,d){var e=!1;g[b.toLowerCase()]?e=(g[b.toLowerCase()]||function(){})(a,d):jEli.$isFunction(d)&&(e=d(a)),e||c.push(b)}),c}var e={},f={register:{},login:{},authManager:{}},g={},h=c.getLoginAttempt();return f.register.jDB=function(a,b,c){new jEli.$jDB(a.DBNAME,a.version||1).isClientMode().requiresLogin().open(a.resource).onSuccess(function(a){var d=a.result;d._users().add(f.register.postBody).onSuccess(b).onError(c),d.close(!1)})},f.register.custom=function(b,c,d){b.url&&a({url:b.url,dataType:"json",data:f.register.postBody}).then(c,d)},f.login.getHeader=function(){return{"Content-Type":"application/x-www-form-urlencoded",Accept:"application/json"}},f.login.oauth=function(c,d,e){var g=f.login.postBody,h=this.getHeader(),i="username="+encodeURIComponent(g.username)+"&password="+encodeURIComponent(g.password)+"&grant_type=password&scope=read%20write";h.Authorization="Basic "+b.encode(c.client_id+":"+c.client_secret),a.post(c.url,i,h).then(d,e)},f.login.custom=function(b,c,d){var e=f.login.postBody,g=this.getHeader();return a.post(b.url,e,g).then(c,d)},f.login.jdb=function(a,b,c){var d=f.login.postBody;new jEli.$jDB(a.DBNAME,a.version||1).isClientMode().requiresLogin().open(a.resource).onSuccess(function(a){var e=a.result;e._users().authorize(d).onSuccess(b).onError(c),e.close(!1)}).onError(c)},g.minlength=function(a,b){return!(jEli.$isObject(a)||!a)&&String(a).length>=b},g.maxlength=function(a,b){return!(jEli.$isObject(a)||!a)&&String(a).length<=b},g.emailvalidation=function(a){var b=/^\w+([\.-]?\w+)*@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;return b.test(a)},g.domainvalidation=function(a){return/[a-zA-Z0-9][a-zA-Z0-9-]{1,61}[a-zA-Z0-9](?:\.[a-zA-Z]{2,})+/.test(a)},f.validate=function(a,b){if(!Object.keys(f[a].postBody).length)return void(this[a].requiresValidation=!0);f[a].validationFailed=!1;jEli.forEach(f[a].postBody,function(c,e){var g=[];b[c]&&(g=d(e,b[c])),g.length&&(f[a].failedValidation[c]=g,f[a].validationFailed=!0)})},e.register={setData:function(a){return f.register.postBody=a,this},setRequiredFields:function(a){if(!a&&!jEli.$isObject(a))throw new error("Configuration is expected to be OBJECT not ("+typeof a+")");f.register.requiresValidation=!0;var b=this;return this.validateFields=function(){return f.register.requiresValidation=!1,f.register.failedValidation={},f.validate("register",a),b},this},save:function(a,b){if(f.register.requiresValidation)return void b({reason:"Form Requires Validation - validateFields : API not called",code:"-101"});if(f.register.validationFailed)b({reason:"Failed Validation",fields:f.register.failedValidation,code:"-101"});else{var d=c.getRegisterConfiguration();d&&(d.DBNAME?f.register.jDB(d,a,b):f.register.custom(d,a,b))}}},e.addValidationRule=function(a,b){return a&&jEli.$isFunction(b)&&(g[a]=b),this},e.login={setData:function(a){return f.login.postBody=a,this},setRequiredFields:function(a){if(!a&&!jEli.$isObject(a))throw new error("Configuration is expected to be OBJECT not ("+typeof a+")");f.login.requiresValidation=!0;var b=this;return this.validateFields=function(){return f.login.requiresValidation=!1,f.login.failedValidation={},f.validate("login",a),b},this},Authorize:function(a,b){if(!h)return void b({reason:"Too Many Login attempt",code:"-100"});if(f.login.requiresValidation)return void b({reason:"Form Requires Validation - validateFields : API not called",code:"-101"});if(f.login.validationFailed)b({reason:"Failed Validation",fields:f.login.failedValidation,code:"-102"});else{var d=c.getLoginConfiguration(),e=c.getLoginType();f.login[e](d,a,b)}h--}},e.authManager={init:function(a){f.authManager.userAuthenticationData=a},isAuthentication:function(){var a=f.authManager.userAuthenticationData;return!!a},destroy:function(){delete f.authManager.userAuthenticationData}},e}jEli.jModule("jeli.auth.service",[]).jProvider("jAuthProvider",a).jFactory("jAuthService",["$http","Base64","jAuthProvider",b])}();